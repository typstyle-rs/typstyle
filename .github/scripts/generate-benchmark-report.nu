#!/usr/bin/env nu

# Generate complete benchmark comparison report
# Usage: nu generate-benchmark-report.nu <base-results-dir> <pr-results-dir>

def main [base_dir: string, pr_dir: string] {
    # Generate benchmark comparison using critcmp
    let bench_result = generate_bench_report

    # Generate binary size comparison
    let binary_size_report = generate_bloat_report $base_dir $pr_dir

    # Generate the complete report
    let report = $"### 📊 Benchmark Performance Report

```console
($bench_result)
```

($binary_size_report)

Generated by GitHub Actions on (date now | format date '%Y-%m-%d %H:%M:%S UTC')"

    # Save to file
    $report | save -f benchmark-results.md

    print "Generated benchmark comparison report"
    print $report
}

def generate_bench_report [] {
    # Generate benchmark comparison using critcmp
    try {
        ^critcmp --color never base pr | str trim
    } catch {
        "⚠️ Benchmark comparison not available"
    }
}

def generate_bloat_report [base_dir: string, pr_dir: string] {
    let base_size_file = $"($base_dir)/bloat/size-base.bytes"
    let pr_size_file = $"($pr_dir)/bloat/size-pr.bytes"
    let base_bloat_file = $"($base_dir)/bloat/bloat-base.json"
    let pr_bloat_file = $"($pr_dir)/bloat/bloat-pr.json"

    # Check if size files exist
    if not ($base_size_file | path exists) or not ($pr_size_file | path exists) {
        return "⚠️ Binary size data not available for comparison."
    }

    # Read binary sizes
    let base_size = ($base_size_file | open | into int)
    let pr_size = ($pr_size_file | open | into int)
    let diff = ($pr_size - $base_size)

    # Convert to human readable format
    let base_size_human = ($base_size | into filesize)
    let pr_size_human = ($pr_size | into filesize)

    # Calculate change indicators
    let change_info = if $diff == 0 {
        {emoji: "=", text: "no change"}
    } else if $diff > 0 {
        let diff_human = ($diff | into filesize)
        let diff_percent = (($diff * 100.0) / $base_size | math round -p 2)
        {emoji: "📈", text: $"+($diff_human) \(+($diff_percent)%\)"}
    } else {
        let diff_abs = ($diff * -1)
        let diff_human = ($diff_abs | into filesize)
        let diff_percent = (($diff_abs * 100.0) / $base_size | math round -p 2)
        {emoji: "📉", text: $"-($diff_human) \(-($diff_percent)%\)"}
    }

    # Generate bloat details if available
    let bloat_details = generate_bloat_diff $base_bloat_file $pr_bloat_file

    # Generate the report
    $"
### 📏 Binary Size Comparison

| Branch | Size | Change |
|--------|------|--------|
| Base   | ($base_size_human) | - |
| PR     | ($pr_size_human) | ($change_info.emoji) ($change_info.text) |
($bloat_details)"
}

def generate_bloat_diff [base_file: string, pr_file: string] {
    try {
        # Parse JSON files
        let base_data = ($base_file | open)
        let pr_data = ($pr_file | open)

        # Extract top 20 crates with aligned formatting
        let base_crates = ($base_data.crates | first 20 | each { |crate|
            $"($crate.name | fill -a l -w 25) ($crate.size)"
        })
        let pr_crates = ($pr_data.crates | first 20 | each { |crate|
            $"($crate.name | fill -a l -w 25) ($crate.size)"
        })

        # Save to temp files for diff
        $base_crates | save -f base_crates.tmp
        $pr_crates | save -f pr_crates.tmp

        # Generate diff
        let diff_output = (try {
            ^diff -u base_crates.tmp pr_crates.tmp | lines | skip 2 | str join "\n"
        } catch {
            ""
        })

        # Clean up temp files
        rm -f base_crates.tmp pr_crates.tmp

        # Return details if there are differences
        if ($diff_output | str length) > 0 {
            $"

<details>
<summary>📦 Detailed Crate Size Diff \(cargo-bloat\)</summary>

Note: numbers above are a result of guesswork. They are not 100% correct and never will be.

```diff
($diff_output)
```

</details>"
        } else {
            ""
        }
    } catch {
        ""
    }
}
